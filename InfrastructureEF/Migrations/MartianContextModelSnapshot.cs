// <auto-generated />
using System;
using InfrastructureEF.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace InfrastructureEF.Migrations
{
    [DbContext(typeof(MartianContext))]
    partial class MartianContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Domain.Model.Entities.Command", b =>
                {
                    b.Property<int>("CommandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("CommandId");

                    b.ToTable("Commands");

                    b.HasData(
                        new
                        {
                            CommandId = 1,
                            Description = "Move Left",
                            Name = "L"
                        },
                        new
                        {
                            CommandId = 2,
                            Description = "Move Right",
                            Name = "R"
                        },
                        new
                        {
                            CommandId = 3,
                            Description = "Move Forward",
                            Name = "F"
                        });
                });

            modelBuilder.Entity("Domain.Model.Entities.Direction", b =>
                {
                    b.Property<int>("DirectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("DirectionId");

                    b.ToTable("Directions");

                    b.HasData(
                        new
                        {
                            DirectionId = 1,
                            Description = "North",
                            Name = "N"
                        },
                        new
                        {
                            DirectionId = 2,
                            Description = "South",
                            Name = "S"
                        },
                        new
                        {
                            DirectionId = 3,
                            Description = "East",
                            Name = "E"
                        },
                        new
                        {
                            DirectionId = 4,
                            Description = "West",
                            Name = "W"
                        });
                });

            modelBuilder.Entity("Domain.Model.Entities.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DirectionId")
                        .HasColumnType("integer");

                    b.Property<int>("X")
                        .HasColumnType("integer");

                    b.Property<int>("Y")
                        .HasColumnType("integer");

                    b.HasKey("PositionId");

                    b.HasIndex("DirectionId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Domain.Model.Entities.Robot", b =>
                {
                    b.Property<int>("RobotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer");

                    b.HasKey("RobotId");

                    b.HasIndex("PositionId");

                    b.ToTable("Robots");
                });

            modelBuilder.Entity("Domain.Model.Entities.Route", b =>
                {
                    b.Property<int>("RouteId")
                        .HasColumnType("integer");

                    b.Property<int>("CommandId")
                        .HasColumnType("integer");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer");

                    b.Property<int>("RobotId")
                        .HasColumnType("integer");

                    b.HasKey("RouteId");

                    b.HasIndex("PositionId");

                    b.HasIndex("RobotId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("Domain.Model.Entities.Position", b =>
                {
                    b.HasOne("Domain.Model.Entities.Direction", "Direction")
                        .WithMany("Positions")
                        .HasForeignKey("DirectionId")
                        .HasConstraintName("FK_Position_Direction")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Direction");
                });

            modelBuilder.Entity("Domain.Model.Entities.Robot", b =>
                {
                    b.HasOne("Domain.Model.Entities.Position", "Position")
                        .WithMany("Robots")
                        .HasForeignKey("PositionId")
                        .HasConstraintName("FK_Robot_Position")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Domain.Model.Entities.Route", b =>
                {
                    b.HasOne("Domain.Model.Entities.Position", "Position")
                        .WithMany("Routes")
                        .HasForeignKey("PositionId")
                        .HasConstraintName("FK_Route_Position")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Model.Entities.Robot", "Robot")
                        .WithMany("Routes")
                        .HasForeignKey("RobotId")
                        .HasConstraintName("FK_Route_Robot")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Model.Entities.Command", "Command")
                        .WithMany("Routes")
                        .HasForeignKey("RouteId")
                        .HasConstraintName("FK_Route_Command")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Command");

                    b.Navigation("Position");

                    b.Navigation("Robot");
                });

            modelBuilder.Entity("Domain.Model.Entities.Command", b =>
                {
                    b.Navigation("Routes");
                });

            modelBuilder.Entity("Domain.Model.Entities.Direction", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("Domain.Model.Entities.Position", b =>
                {
                    b.Navigation("Robots");

                    b.Navigation("Routes");
                });

            modelBuilder.Entity("Domain.Model.Entities.Robot", b =>
                {
                    b.Navigation("Routes");
                });
#pragma warning restore 612, 618
        }
    }
}
